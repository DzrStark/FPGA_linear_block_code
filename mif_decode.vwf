/*
WARNING: Do NOT edit the input and output ports in this file in a text
editor if you plan to continue editing the block that represents it in
the Block Editor! File corruption is VERY likely to occur.
*/

/*
Copyright (C) 1991-2009 Altera Corporation
Your use of Altera Corporation's design tools, logic functions 
and other software and tools, and its AMPP partner logic 
functions, and any output files from any of the foregoing 
(including device programming or simulation files), and any 
associated documentation or information are expressly subject 
to the terms and conditions of the Altera Program License 
Subscription Agreement, Altera MegaCore Function License 
Agreement, or other applicable license agreement, including, 
without limitation, that your use is for the sole purpose of 
programming logic devices manufactured by Altera and sold by 
Altera or its authorized distributors.  Please refer to the 
applicable agreement for further details.
*/

HEADER
{
	VERSION = 1;
	TIME_UNIT = ns;
	DATA_OFFSET = 0.0;
	DATA_DURATION = 100000.0;
	SIMULATION_TIME = 100000.0;
	GRID_PHASE = 0.0;
	GRID_PERIOD = 10.0;
	GRID_DUTY_CYCLE = 50;
}

SIGNAL("20MHz")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = INPUT;
	PARENT = "";
}

SIGNAL("decode_out")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("m_sequence")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("hm_noise")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ym_out[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ym_out[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ym_out[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ym_out[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("cb_out[6]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("cb_out[5]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("cb_out[4]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("cb_out[3]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("cb_out[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("cb_out[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("cb_out[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ss[2]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ss[1]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

SIGNAL("ss[0]")
{
	VALUE_TYPE = NINE_LEVEL_BIT;
	SIGNAL_TYPE = SINGLE_BIT;
	WIDTH = 1;
	LSB_INDEX = -1;
	DIRECTION = OUTPUT;
	PARENT = "";
}

GROUP("ss")
{
	MEMBERS = "ss[2]", "ss[1]", "ss[0]";
}

GROUP("cb_out")
{
	MEMBERS = "cb_out[6]", "cb_out[5]", "cb_out[4]", "cb_out[3]", "cb_out[2]", "cb_out[1]", "cb_out[0]";
}

GROUP("ym_out")
{
	MEMBERS = "ym_out[6]", "ym_out[5]", "ym_out[4]", "ym_out[3]";
}

TRANSITION_LIST("20MHz")
{
	NODE
	{
		REPEAT = 1;
		NODE
		{
			REPEAT = 2000;
			LEVEL 0 FOR 25.0;
			LEVEL 1 FOR 25.0;
		}
	}
}

TRANSITION_LIST("decode_out")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 28775.0;
		LEVEL 1 FOR 5600.0;
		LEVEL 0 FOR 1400.0;
		LEVEL 1 FOR 4200.0;
		LEVEL 0 FOR 1400.0;
		LEVEL 1 FOR 1400.0;
		LEVEL 0 FOR 1400.0;
		LEVEL 1 FOR 9800.0;
		LEVEL 0 FOR 1400.0;
		LEVEL 1 FOR 1400.0;
		LEVEL 0 FOR 2800.0;
		LEVEL 1 FOR 2800.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1400.0;
			LEVEL 1 FOR 1400.0;
		}
		LEVEL 0 FOR 1400.0;
		LEVEL 1 FOR 4200.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2800.0;
			LEVEL 1 FOR 2800.0;
			LEVEL 0 FOR 1400.0;
			LEVEL 1 FOR 1400.0;
		}
		LEVEL 0 FOR 1400.0;
		LEVEL 1 FOR 4200.0;
		LEVEL 0 FOR 1225.0;
	}
}

TRANSITION_LIST("m_sequence")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 6375.0;
		LEVEL 1 FOR 5600.0;
		LEVEL 0 FOR 1400.0;
		LEVEL 1 FOR 4200.0;
		LEVEL 0 FOR 1400.0;
		LEVEL 1 FOR 1400.0;
		LEVEL 0 FOR 1400.0;
		LEVEL 1 FOR 9800.0;
		LEVEL 0 FOR 1400.0;
		LEVEL 1 FOR 1400.0;
		LEVEL 0 FOR 2800.0;
		LEVEL 1 FOR 2800.0;
		NODE
		{
			REPEAT = 3;
			LEVEL 0 FOR 1400.0;
			LEVEL 1 FOR 1400.0;
		}
		LEVEL 0 FOR 1400.0;
		LEVEL 1 FOR 4200.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 2800.0;
			LEVEL 1 FOR 2800.0;
			LEVEL 0 FOR 1400.0;
			LEVEL 1 FOR 1400.0;
		}
		NODE
		{
			REPEAT = 5;
			LEVEL 0 FOR 1400.0;
			LEVEL 1 FOR 4200.0;
		}
		LEVEL 0 FOR 1225.0;
	}
}

TRANSITION_LIST("hm_noise")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 1275.0;
		NODE
		{
			REPEAT = 9;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1400.0;
		}
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 1200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 1400.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 400.0;
		LEVEL 0 FOR 1000.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 1200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 400.0;
		LEVEL 0 FOR 800.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 1200.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 1200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 1200.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 400.0;
		LEVEL 1 FOR 800.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 1200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 400.0;
		LEVEL 0 FOR 800.0;
		LEVEL 1 FOR 200.0;
		NODE
		{
			REPEAT = 4;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 1400.0;
		}
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 1200.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 400.0;
		LEVEL 1 FOR 800.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 1200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 400.0;
		LEVEL 0 FOR 1000.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 400.0;
		LEVEL 1 FOR 1000.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 400.0;
		LEVEL 0 FOR 1000.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 400.0;
			LEVEL 1 FOR 800.0;
			LEVEL 0 FOR 200.0;
		}
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 1200.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 400.0;
			LEVEL 0 FOR 800.0;
		}
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 400.0;
		LEVEL 0 FOR 1000.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 400.0;
		LEVEL 1 FOR 800.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 400.0;
		LEVEL 1 FOR 1000.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 1200.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 400.0;
		LEVEL 1 FOR 800.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 1400.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 400.0;
		LEVEL 1 FOR 1000.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 400.0;
		LEVEL 0 FOR 1000.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 400.0;
		LEVEL 1 FOR 1000.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 1200.0;
			LEVEL 0 FOR 200.0;
			LEVEL 1 FOR 200.0;
			LEVEL 0 FOR 1200.0;
			LEVEL 1 FOR 200.0;
		}
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 400.0;
		LEVEL 0 FOR 800.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 400.0;
		LEVEL 0 FOR 1000.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 400.0;
		LEVEL 1 FOR 800.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 400.0;
		LEVEL 1 FOR 1000.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 1200.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 400.0;
		LEVEL 1 FOR 800.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 1200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 1400.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 400.0;
		LEVEL 0 FOR 800.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 400.0;
		LEVEL 0 FOR 1000.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 400.0;
		LEVEL 1 FOR 1000.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 1200.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 400.0;
		LEVEL 1 FOR 800.0;
		LEVEL 0 FOR 200.0;
		LEVEL 1 FOR 200.0;
		LEVEL 0 FOR 925.0;
	}
}

TRANSITION_LIST("ym_out[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 28275.0;
		LEVEL 1 FOR 44800.0;
		LEVEL 0 FOR 5600.0;
		LEVEL 1 FOR 21325.0;
	}
}

TRANSITION_LIST("ym_out[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 22675.0;
		LEVEL 1 FOR 5600.0;
		LEVEL 0 FOR 11200.0;
		LEVEL 1 FOR 11200.0;
		LEVEL 0 FOR 16800.0;
		LEVEL 1 FOR 11200.0;
		LEVEL 0 FOR 11200.0;
		LEVEL 1 FOR 10125.0;
	}
}

TRANSITION_LIST("ym_out[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 22675.0;
		LEVEL 1 FOR 28000.0;
		LEVEL 0 FOR 5600.0;
		LEVEL 1 FOR 22400.0;
		LEVEL 0 FOR 5600.0;
		LEVEL 1 FOR 15725.0;
	}
}

TRANSITION_LIST("ym_out[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 22675.0;
		LEVEL 1 FOR 11200.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 5600.0;
			LEVEL 1 FOR 5600.0;
		}
		LEVEL 0 FOR 22400.0;
		LEVEL 1 FOR 5600.0;
		LEVEL 0 FOR 15725.0;
	}
}

TRANSITION_LIST("cb_out[6]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 28275.0;
		LEVEL 1 FOR 44800.0;
		LEVEL 0 FOR 5600.0;
		LEVEL 1 FOR 21325.0;
	}
}

TRANSITION_LIST("cb_out[5]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 22675.0;
		LEVEL 1 FOR 5600.0;
		LEVEL 0 FOR 11200.0;
		LEVEL 1 FOR 11200.0;
		LEVEL 0 FOR 16800.0;
		LEVEL 1 FOR 11200.0;
		LEVEL 0 FOR 11200.0;
		LEVEL 1 FOR 10125.0;
	}
}

TRANSITION_LIST("cb_out[4]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 22675.0;
		LEVEL 1 FOR 28000.0;
		LEVEL 0 FOR 5600.0;
		LEVEL 1 FOR 22400.0;
		LEVEL 0 FOR 5600.0;
		LEVEL 1 FOR 15725.0;
	}
}

TRANSITION_LIST("cb_out[3]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 22675.0;
		LEVEL 1 FOR 11200.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 5600.0;
			LEVEL 1 FOR 5600.0;
		}
		LEVEL 0 FOR 22400.0;
		LEVEL 1 FOR 5600.0;
		LEVEL 0 FOR 15725.0;
	}
}

TRANSITION_LIST("cb_out[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 39475.0;
		LEVEL 1 FOR 16800.0;
		LEVEL 0 FOR 11200.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 1 FOR 5600.0;
			LEVEL 0 FOR 5600.0;
		}
		LEVEL 1 FOR 10125.0;
	}
}

TRANSITION_LIST("cb_out[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 33875.0;
		LEVEL 1 FOR 11200.0;
		LEVEL 0 FOR 11200.0;
		LEVEL 1 FOR 11200.0;
		NODE
		{
			REPEAT = 2;
			LEVEL 0 FOR 5600.0;
			LEVEL 1 FOR 5600.0;
		}
		LEVEL 0 FOR 10125.0;
	}
}

TRANSITION_LIST("cb_out[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 28275.0;
		LEVEL 1 FOR 5600.0;
		LEVEL 0 FOR 5600.0;
		LEVEL 1 FOR 5600.0;
		LEVEL 0 FOR 28000.0;
		LEVEL 1 FOR 5600.0;
		LEVEL 0 FOR 21325.0;
	}
}

TRANSITION_LIST("ss[2]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 100000.0;
	}
}

TRANSITION_LIST("ss[1]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 100000.0;
	}
}

TRANSITION_LIST("ss[0]")
{
	NODE
	{
		REPEAT = 1;
		LEVEL 0 FOR 100000.0;
	}
}

DISPLAY_LINE
{
	CHANNEL = "20MHz";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 0;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "decode_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = ASCII;
	TREE_INDEX = 1;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "m_sequence";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 2;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "hm_noise";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 3;
	TREE_LEVEL = 0;
}

DISPLAY_LINE
{
	CHANNEL = "ym_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 4;
	TREE_LEVEL = 0;
	CHILDREN = 5, 6, 7, 8;
}

DISPLAY_LINE
{
	CHANNEL = "ym_out[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 5;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "ym_out[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 6;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "ym_out[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 7;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "ym_out[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 8;
	TREE_LEVEL = 1;
	PARENT = 4;
}

DISPLAY_LINE
{
	CHANNEL = "cb_out";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 9;
	TREE_LEVEL = 0;
	CHILDREN = 10, 11, 12, 13, 14, 15, 16;
}

DISPLAY_LINE
{
	CHANNEL = "cb_out[6]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 10;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "cb_out[5]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 11;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "cb_out[4]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 12;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "cb_out[3]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 13;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "cb_out[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 14;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "cb_out[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 15;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "cb_out[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 16;
	TREE_LEVEL = 1;
	PARENT = 9;
}

DISPLAY_LINE
{
	CHANNEL = "ss";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 17;
	TREE_LEVEL = 0;
	CHILDREN = 18, 19, 20;
}

DISPLAY_LINE
{
	CHANNEL = "ss[2]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 18;
	TREE_LEVEL = 1;
	PARENT = 17;
}

DISPLAY_LINE
{
	CHANNEL = "ss[1]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 19;
	TREE_LEVEL = 1;
	PARENT = 17;
}

DISPLAY_LINE
{
	CHANNEL = "ss[0]";
	EXPAND_STATUS = COLLAPSED;
	RADIX = Binary;
	TREE_INDEX = 20;
	TREE_LEVEL = 1;
	PARENT = 17;
}

TIME_BAR
{
	TIME = 28275;
	MASTER = TRUE;
}
;
